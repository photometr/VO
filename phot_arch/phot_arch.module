<?php
/**
 * @file
 * This module works with archival data for selected blazars
 *
 *
 * General documentation is available at
 * @link database Database abstraction layer documentation @endlink and
 * at @link http://drupal.org/node/310069 @endlink.
 */

/**
 * @defgroup phot_arch
 * @ingroup VO
 * @{
 * General documentation is available at
 * @link database.inc database abstraction layer documentation @endlink and
 * at @link http://drupal.org/node/310069 Database API @endlink.
 *
 */

/**
 * This function converts a string to a float no matter is the decimal separator dot (.)
 * or comma (,). It also converts integers correctly. It takes the digits from the beginning
 * of the string and ignores all other characters.
 */

/**
 * Implements hook_help().
 *
 * Show some help on each form provided by this module.
 */
function phot_arch_help($path) {
  $output = '';
  switch ($path) {
    case 'VO/phot_arch':
      $output = t('Here you can obtain archival data for blazars.');
      $output .= t('La La La.');
      break;
    case 'VO/phot_arch/add':
      $output = t('Only registered users are able to add data.');
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 *
 * Set up calls to drupal_get_form() for all our example cases.
 */
function phot_arch_menu() {
  $items = array();

  $items['VO/phot_arch'] = array(
    'title' => 'Archival photometry database',
    'page callback' => 'phot_arch_get_data',
    'access callback' => TRUE,
  );
  $items['VO/phot_arch/get_data'] = array(
    'title' => 'Get Data',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['VO/phot_arch/add'] = array(
    'title' => 'Add data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('phot_arch_form_add'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}

function phot_arch_entry_load($entry = array()) {
  // Read all fields from the phot_arch_data table.
  $select = db_select('phot_arch_data', 'c');
  $select->fields('c');

  // Add each field and value as a condition to this query.
  foreach ($entry as $field => $value) {
    $select->condition($field, $value);
  }
  // Return the result in object format.
  return $select->execute()->fetchAll();
}

/**
 * Render a list of entries in the database.
 */
function phot_arch_get_data() {
  $output = '';

  // Get all entries in the dbtng_example table.
  if ($entries = phot_arch_entry_load()) {
    $rows = array();
    foreach ($entries as $entry) {
      // Sanitize the data before handing it off to the theme layer.
      $rows[] = array_map('check_plain', (array) $entry);
    }
    // Make a table for them.
    $header = array(t('id'),t('creator_id'),t('blazar_id'),t('JD'), t('band'), t('mag'), t('mag_err'), t('author_year'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    drupal_set_message(t('No entries have been added yet.'));
  }
  return $output;
}

function blazars_list_load() {
  // Read all fields from the phot_arch_objects table.

  $result = db_query('SELECT name FROM phot_arch_objects');
  return $result->fetchCol();
}

/**
 * Prepare a simple form to add data, with all the interesting fields.
 */
function phot_arch_form_add($form, &$form_state) {
  $form = array();

  $form = array(
    '#prefix' => '<div id="updateform">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'select',
    '#options' => blazars_list_load(),
    '#title' => t('Choose blazar name:'),
  );
  $form['band'] = array(
    '#type'  => 'textfield',
    '#title' => t('Band:'),
    '#size'  => 2,
  );
  $form['published'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Who and when published the data:'),
  );
  $form['published']['author'] = array(
    '#type'  => 'textfield',
    '#title' => t('Author'),
    '#size'  => 15,
  );
  $form['published']['year'] = array(
    '#type'  => 'textfield',
    '#title' => t('Year'),
    '#size'  => 15,
  );
  $form['data'] = array(
    '#type'  => 'textarea',
    '#title' => 'Data:<br>in the following form "Julian_date Magnitude Magnitude_error',
    '#size'  => 15,
    '#description' => t('use 999 if error is undefined'),
  );
  $form['bibtex'] = array(
    '#type'  => 'textarea',
    '#title' => 'Bibtex entry for the source:',
    '#size'  => 15,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}

/**
 * Save an entry in the database.
 *
 * The underlying function is db_insert().
 *
 * In Drupal 6, this would have been:
 * @code
 *   db_query(
 *     "INSERT INTO {phot_arch} (name, surname, age)
 *       VALUES ('%s', '%s', '%d')",
 *     $entry['name'],
 *     $entry['surname'],
 *     $entry['age']
 *   );
 * @endcode
 *
 * Exception handling is shown in this example. It could be simplified
 * without the try/catch blocks, but since an insert will throw an exception
 * and terminate your application if the exception is not handled, it is best
 * to employ try/catch.
 *
 * @param $entry
 *   An array containing all the fields of the database record.
 *
 * @see db_insert()
 */
function phot_arch_entry_insert($entry) {
  global $user;

  //check if user allowed to add the database
  if (! in_array("phot_db_maintainer", $user->roles)) {
    drupal_set_message(t('ask Admin to be added to phot_db_maintainer role'), 'error');
    return NULL;
  }

  //parsing data
  $data_arr = explode("\n", $entry['data']);
  foreach ($data_arr as $value) {
    $one_line  = explode(" ", $value);
    if (count($one_line) != 3) {
      drupal_set_message(t('Data string length must be = 3'), 'error');
      return NULL;
    }
    if (!(is_numeric($one_line[0]) &&
          is_numeric($one_line[0]) &&
          is_numeric($one_line[0]))) {
      drupal_set_message(t('It seems that you give not numeric data or commas.'), 'error');
      return NULL;
    }
    $JD[]      = floatval($one_line[0]); //FIXME change it with smart function
    $mag[]     = floatval($one_line[1]); //FIXME who understands comma as delimeter
    $mag_err[] = floatval($one_line[2]);
  }
  
  $blazar_id = $entry['blazar_name'] + 1; //FIXME dangerous
  $author_year = $entry['author'].$entry['year']; //TODO add checking for duplicates
  $paper_entry = array(
    'author_year' => $author_year,
    'bibtex'      => $entry['bibtex'],
  );

  $trans_value = db_transaction();
  try {
    //write new article
    //FIXME add checking of duplications
    $return_value = db_insert('phot_arch_papers')
                    ->fields($paper_entry)
                    ->execute();
    //fill data table
    for ( $i = 0; $i < count($JD); $i += 1) {
      $data_entries[] = array(
        'creator_id'  => $user->uid,
        'blazar_id'   => $blazar_id,
        'JD'          => $JD[$i],
        'band'        => $entry['band'],
        'mag'         => $mag[$i],
        'mag_err'     => $mag_err[$i],
        'author_year' => $author_year // Such a stupid way since they don't have foreing keys
      );
    }
    $query = db_insert('phot_arch_data')->fields(array(
                                          'creator_id',
                                          'blazar_id',
                                          'JD',
                                          'band',
                                          'mag',
                                          'mag_err',
                                          'author_year'
                                          ));
    foreach ($data_entries as $data_entry) {
      $query->values($data_entry);
    }
    $query->execute();
  }
  catch (Exception $e) {
    $trans_value->rollback();
    drupal_set_message(t('db_insert failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $return_value;
}

/**
 * Submit handler for 'add entry' form.
 */
function phot_arch_form_add_submit($form, &$form_state) {
  // Save the submitted entry.
  $entry = array(
    'blazar_name' => $form_state['values']['name'],
    'band'        => $form_state['values']['band'],
    'author'      => $form_state['values']['author'],
    'year'        => $form_state['values']['year'],
    'data'        => $form_state['values']['data'],
    'bibtex'      => $form_state['values']['bibtex'],
  );
  $return = phot_arch_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Created entry @entry", array('@entry' => print_r($entry, TRUE))));
  }
}

/**
 * @} End of "defgroup phot_arch".
 */
